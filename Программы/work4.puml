@startuml
title Пратическая работа 4: Iterator pattern
class main{
cookies = cookiesAggregate(5)
iterator = cookies.iterator()
}


class cookiesAggregate{
iterator()
amount_num()
}

class cookiesnumIterator{
init()
next(self)
has_next(self)
}
class  Iterator{
next(self)
has_next(self)
}

main <- cookiesAggregate
main ..>Iterator:<<create>>
cookiesnumIterator <.. cookiesAggregate: <<create>>
cookiesnumIterator o-- cookiesAggregate
cookiesnumIterator --> Iterator

note right of cookiesAggregate::"iterator()"
return cookiesnumIterator(self.num)
end note

@enduml








@startuml
title Пратическая работа 4: Visitor

class OrderItemVisitor{
<<interface>>
visit(self, item)
}


class ItemElement{
<<interface>>
accept(self, visitor: OrderItemVisitor)
}

class Tort{
init()
get_price(self)
accept(self, visitor: OrderItemVisitor)
}
class  Coffee{
init()
get_price(self)
accept(self, visitor: OrderItemVisitor)
}
class WithOutDiscountVisitor{
visit(self, item: ItemElement)
}

class OnlyTortDiscountVisitor{
visit(self, item: ItemElement)
}

class OnlyCoffeeDiscountVisitor{
visit(self, item: ItemElement)
}

class AllDiscountVisitor{
visit(self, item: ItemElement)
}

AllDiscountVisitor..>OrderItemVisitor
WithOutDiscountVisitor..>OrderItemVisitor
OnlyTortDiscountVisitor..>OrderItemVisitor
OnlyCoffeeDiscountVisitor..>OrderItemVisitor

OrderItemVisitor..>Tort
OrderItemVisitor..>Coffee

ItemElement..>OrderItemVisitor
Tort..>ItemElement
Coffee ..>ItemElement




@enduml

